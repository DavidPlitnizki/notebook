{"version":3,"sources":["components/Board/Board.module.css","components/Toggle/ToggleTheme.module.css","components/Header/Header.module.css","components/Form/Form.module.css","components/App/App.module.css","components/Navigation/Navigation.module.css","components/Note/Note.module.css","serviceWorker.ts","components/Badge/Badge.tsx","components/Navigation/Navigation.tsx","components/Toggle/ToggleTheme.tsx","store/ThemeSlice.ts","components/Header/Header.tsx","store/TaskSlice.ts","hooks/useStorage.tsx","components/Note/Note.tsx","components/List/NoteList.tsx","components/Board/Board.tsx","components/Pages/ListPage.tsx","components/Form/Form.tsx","components/Pages/MainPage.tsx","components/Pages/NoMatch.tsx","routerApp.tsx","components/App/App.tsx","store/index.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Badge","count","type","className","Navigation","themeStyle","theme","styles","dark","to","process","ToggleTheme","getTheme","useSelector","state","useEffect","themeState","day","toggle_wrapper","circle","onClick","themeSlice","createSlice","name","initialState","reducers","changeTheme","action","payload","actions","Header","tasksList","tasks","dispatch","useDispatch","changeThemeCB","useCallback","styleTheme","bright","wrapper","id","htmlFor","length","taskSlice","addTask","newState","deleteTask","filtredTasks","filter","task","addStoredTasks","updateStatusTask","push","useStorage","getAll","parsedRes","res","localStorage","getItem","JSON","parse","save","newTasks","result","setItem","stringify","removeTask","item","getTask","updateTask","Note","data","dragStart","draggable","onDragStart","title","status","pre_init","desc","NoteList","onDrag","map","key","e","Board","props","useState","todoTasks","setTodoTasks","progressTasks","setProgressTasks","doneTasks","setDoneTasks","dragItem","useRef","list","onDragOverHandler","preventDefault","onDragStartHandler","current","onDropHandler","dropTarget","filtredDataByTask","newTask","filtredTodoTasks","fromTask","filtredProgressTasks","filtredDoneTasks","col","target","onDragOver","onDrop","Listpage","setTasks","taskLength","setTaskLength","Form","input","setInput","txtArea","setTxtArea","clearTextFields","onSubmit","event","formObj","Date","now","onAddTask","onChange","value","style","width","placeholder","height","Main","NoMatch","RouterApp","exact","path","component","MainPage","ListPage","App","storedTasks","store","configureStore","reducer","taskSliceReducer","themeSliceReducer","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d2c278c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Board_wrapper__27StD\",\"col\":\"Board_col__31reL\",\"target\":\"Board_target__33EIV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggle_wrapper\":\"ToggleTheme_toggle_wrapper__2_qzd\",\"circle\":\"ToggleTheme_circle__2HHPY\",\"day\":\"ToggleTheme_day__UpLbD\",\"dark\":\"ToggleTheme_dark__3WYip\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bright\":\"Header_bright__1oZms\",\"wrapper\":\"Header_wrapper__SNV1z\",\"dark\":\"Header_dark__3ULai\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"Form_dark__126gF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3iNvQ\",\"dark\":\"App_dark__3_yPO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"Navigation_dark__8uptj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pre_init\":\"Note_pre_init__3QGHa\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Badge.css';\r\n\r\n\r\nconst Badge: React.FC<{count: number, type: string}> = ({count, type}) => {\r\n    return (\r\n    <div className={`container_badge ${type}`}>\r\n        <span>{count}</span>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Badge;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from './Navigation.module.css';\r\n\r\ninterface IProps {\r\n    theme: string\r\n}\r\n\r\nconst Navigation: React.FC<IProps> = ({theme}) => {\r\n\r\n    const themeStyle = (theme === 'bright') ? '' : styles.dark;\r\n    return (\r\n    <nav className={`${themeStyle}`}>\r\n        <ul className=\"inline\">\r\n            <li><Link to={`${process.env.PUBLIC_URL}/`}>Main</Link></li>\r\n            <li><Link to={`${process.env.PUBLIC_URL}/list`}>All</Link></li>\r\n        </ul>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React, {useEffect} from 'react';\r\nimport styles from './ToggleTheme.module.css'\r\n\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport { RootState } from '../../store';\r\n\r\n\r\ninterface IProps {\r\n    getTheme: (theme: string) => void,\r\n    theme: string\r\n}\r\n\r\n\r\nconst ToggleTheme: React.FC<IProps> = ({getTheme, theme}) => {\r\n    const themeStyle = useSelector((state: RootState) => state.theme.theme);\r\n\r\n    useEffect(() => {\r\n    },[themeStyle])\r\n\r\n    const changeToggle = () => {\r\n        const themeName = (themeStyle === 'bright') ? 'dark' : 'bright';\r\n        getTheme(themeName);\r\n       \r\n       \r\n    }\r\n\r\n    const themeState = (theme === 'bright') ? styles.day : styles.dark;\r\n    return (\r\n        <div className={styles.toggle_wrapper}>\r\n            <div className={styles.circle + \" \" + themeState} onClick={changeToggle}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleTheme;","import {ITheme, IThemeState} from '../interfaces/interfaces';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\n\r\nconst initialState: IThemeState = {\r\n    theme: 'bright'\r\n}\r\n\r\nexport const themeSlice = createSlice({\r\n  name: 'theme',\r\n  initialState,\r\n  reducers: {\r\n       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n\r\n      changeTheme: (state, action: PayloadAction<ITheme>) => {\r\n        state.theme = action.payload.theme;\r\n      }\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { changeTheme } = themeSlice.actions\r\n\r\nexport default themeSlice.reducer","import React, { useCallback } from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nimport {useSelector} from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Badge from '../Badge/Badge';\r\nimport { RootState } from '../../store';\r\nimport Navigation from '../Navigation/Navigation';\r\nimport ToggleTheme from '../Toggle/ToggleTheme';\r\nimport {useDispatch} from 'react-redux';\r\nimport {changeTheme} from '../../store/ThemeSlice';\r\n\r\nconst Header: React.FC = () => {\r\n    const tasksList = useSelector((state: RootState) => state.tasks.tasks);\r\n    const themeStyle = useSelector((state: RootState) => state.theme.theme);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeThemeCB = useCallback((theme: string) => {\r\n        dispatch(changeTheme({theme}))\r\n    },[dispatch])\r\n\r\n    const styleTheme = (themeStyle === 'bright') ? styles.bright : styles.dark;\r\n\r\n    return(\r\n        <nav className={`border split-nav ${styleTheme} ${styles.wrapper}`}>\r\n            <div className=\"nav-brand\">\r\n                <h3><Link to={`${process.env.PUBLIC_URL}/`}>NOTEBOOK</Link></h3>\r\n            </div>\r\n            <ToggleTheme getTheme={changeThemeCB} theme={themeStyle} />\r\n            <div className=\"collapsible\">\r\n            <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible1\" />\r\n                <button>\r\n                    <label htmlFor=\"collapsible1\">\r\n                        <div className=\"bar1\"></div>\r\n                        <div className=\"bar2\"></div>\r\n                        <div className=\"bar3\"></div>\r\n                    </label>\r\n                </button>\r\n                {tasksList.length > 0 && <Badge type=\"menu\" count={tasksList.length} />}\r\n                <div className=\"collapsible-body\">\r\n                    <Navigation theme={themeStyle} />\r\n                    {tasksList.length > 0 && <Badge type=\"link\" count={tasksList.length} />}\r\n                </div>\r\n            </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import {ITask, ITaskState} from '../interfaces/interfaces';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\n\r\nconst initialState: ITaskState = {\r\n    tasks: []\r\n}\r\n\r\nexport const taskSlice = createSlice({\r\n  name: 'task',\r\n  initialState,\r\n  reducers: {\r\n       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n    addTask: (state, action: PayloadAction<ITask>) => {\r\n        const newState = [...state.tasks, action.payload];\r\n        state.tasks = newState;\r\n    },\r\n    deleteTask: (state, action: PayloadAction<number>) => {\r\n        const filtredTasks = state.tasks.filter((task) => task.id !== action.payload);\r\n        state.tasks = filtredTasks;\r\n    },\r\n    addStoredTasks: (state, action: PayloadAction<ITask[]>) => {\r\n        const newState = [...state.tasks, ...action.payload];\r\n        state.tasks = newState;\r\n    },\r\n    updateStatusTask: (state, action: PayloadAction<ITask>) => {\r\n      const newState = state.tasks.filter((task) => task.id !== action.payload.id);\r\n      newState.push(action.payload);\r\n      state.tasks = newState;\r\n    }\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { addTask, deleteTask, addStoredTasks, updateStatusTask } = taskSlice.actions\r\n\r\nexport default taskSlice.reducer","import {ITask} from '../interfaces/interfaces';\r\n\r\nconst storageName = \"NOTES\";\r\n\r\nexport const useStorage = () => {\r\n    const save = (task: ITask) => {\r\n       let newTasks: ITask[] = [];\r\n       const res = localStorage.getItem(storageName);\r\n       if(res) {\r\n        const result = JSON.parse(res);\r\n        newTasks = [...result]\r\n       }\r\n       newTasks.push(task);\r\n       localStorage.setItem(storageName, JSON.stringify(newTasks));\r\n    }\r\n\r\n    const removeTask = (id: number) => {\r\n        let newTasks: ITask[] = [];\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            const result = JSON.parse(res);\r\n            newTasks = result.filter((item: ITask) => item.id !== id);\r\n        }\r\n\r\n        localStorage.setItem(storageName, JSON.stringify(newTasks))\r\n    }\r\n\r\n    const updateTask = (task: ITask) =>{\r\n        const res = getAll();\r\n        if(res) {\r\n            const result = res.filter((item) => item.id !== task.id);\r\n            result.push(task);\r\n            localStorage.setItem(storageName, JSON.stringify(result));\r\n        }\r\n    }\r\n\r\n    const getTask = (task: ITask) => {\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            const result = JSON.parse(res);\r\n            return result.filter((item: ITask) => item.id === task.id);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const getAll = (): ITask[] => {\r\n        let parsedRes: ITask[] = [];\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            parsedRes = JSON.parse(res);\r\n        }\r\n\r\n        return parsedRes;\r\n    }\r\n\r\n    return {save, removeTask, getTask, getAll, updateTask};\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from './Note.module.css';\r\n\r\nimport {ITask} from '../../interfaces/interfaces';\r\nimport {useDispatch} from 'react-redux';\r\nimport {deleteTask} from '../../store/TaskSlice';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\ninterface IProps {\r\n   data: ITask,\r\n   dragStart:(e: any) => void\r\n}\r\n\r\n\r\n\r\nconst Note: React.FC<IProps> = ({data, dragStart}) => {\r\n    const dispatch = useDispatch();\r\n    const {removeTask} = useStorage();\r\n\r\n    const deleteNote = (id: number) => {\r\n        removeTask(id);\r\n        dispatch(deleteTask(id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"card child-shadows-hover\" draggable onDragStart={dragStart}>\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title\">{data.title}</h4>\r\n                <hr />\r\n                <h5 className=\"card-title\">status: {data.status}</h5>\r\n                <hr />\r\n                <pre className={`card-text ${styles.pre_init}`}>{data.desc}</pre>\r\n                <div className=\"btn_wrapper\">\r\n                    <button className=\"btn-danger\" onClick={()=>deleteNote(data.id)} >Delete Note</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\nimport { ITask } from '../../interfaces/interfaces';\r\n\r\nimport Note from '../Note/Note';\r\n\r\ninterface IProps {\r\n    data: ITask[],\r\n    onDrag:(e: any, task: ITask) => void\r\n}\r\n\r\nconst NoteList:React.FC<IProps> = ({data, onDrag}) => {\r\n    return (\r\n        <>\r\n         {(data.length > 0) ? data.map((task: ITask)=>{\r\n                    const data = {\r\n                        id: task.id,\r\n                        title: task.title,\r\n                        desc: task.desc,\r\n                        status: task.status\r\n                    }\r\n                    return(\r\n                        <Note key={task.id}\r\n                                data={data}\r\n                                dragStart={(e: any) => onDrag(e, task)}\r\n                                 />\r\n                    )\r\n                }) : <h1 className=\"no_notes\">NO NOTES</h1>}\r\n            </>\r\n    )\r\n}\r\n\r\nexport default NoteList;","import React,{useState, useRef, useEffect} from 'react';\r\nimport { ITask } from '../../interfaces/interfaces';\r\nimport styles from './Board.module.css';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport { updateStatusTask } from '../../store/TaskSlice';\r\nimport NoteList from '../List/NoteList';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\ninterface IProps {\r\n    list: ITask[]\r\n}\r\n\r\nconst Board: React.FC<IProps> = (props: IProps) => {\r\n    \r\n    const [todoTasks, setTodoTasks] = useState<ITask[]>([]);\r\n    const [progressTasks, setProgressTasks] = useState<ITask[]>([]);\r\n    const [doneTasks, setDoneTasks] = useState<ITask[]>([]);\r\n\r\n    const dragItem = useRef() as React.MutableRefObject<ITask>;\r\n    \r\n    const dispatch = useDispatch();\r\n    const { updateTask } = useStorage();\r\n\r\n    useEffect(() => {\r\n        setTodoTasks(props.list.filter((task) => task.status === \"todo\"));\r\n        setProgressTasks(props.list.filter((task) => task.status === \"in_progress\"));\r\n        setDoneTasks(props.list.filter((task) => task.status === \"done\"));\r\n    },[props.list])\r\n\r\n\r\n\r\n    const onDragOverHandler= (e: any) => { e.preventDefault();}\r\n\r\n    const onDragStartHandler = (e: any, task: ITask) => {\r\n        dragItem.current = task;\r\n    }\r\n\r\n    const onDropHandler = (e: any, dropTarget: string) => {    \r\n\r\n        if(dropTarget === dragItem.current.status) return;\r\n\r\n         if(dropTarget === \"todo\") {\r\n            const task = dragItem.current;\r\n            filtredDataByTask(task);\r\n            \r\n                const newTask = {\r\n                    id: task.id,\r\n                    desc: task.desc,\r\n                    title: task.title,\r\n                    status: dropTarget\r\n                }\r\n            setTodoTasks([...todoTasks, newTask]);\r\n            dispatch(updateStatusTask(newTask));\r\n            updateTask(newTask);\r\n         }else if(dropTarget === \"in_progress\") {\r\n             const task = dragItem.current;\r\n                filtredDataByTask(task);\r\n              \r\n                const newTask = {\r\n                    id: task.id,\r\n                    desc: task.desc,\r\n                    title: task.title,\r\n                    status: dropTarget\r\n                }\r\n                setProgressTasks([...progressTasks, newTask]);\r\n                dispatch(updateStatusTask(newTask));\r\n                updateTask(newTask);\r\n         }else if(dropTarget === \"done\") {\r\n            const task = dragItem.current;\r\n            filtredDataByTask(task);\r\n\r\n            const newTask = {\r\n                id: task.id,\r\n                desc: task.desc,\r\n                title: task.title,\r\n                status: dropTarget\r\n            }\r\n            setDoneTasks([...doneTasks, newTask]);\r\n            dispatch(updateStatusTask(newTask));\r\n            updateTask(newTask);\r\n        }\r\n    }\r\n\r\n    const filtredDataByTask = (task: ITask) => {\r\n        switch(task.status) {\r\n            case \"todo\":\r\n                const filtredTodoTasks = todoTasks.filter((fromTask) => fromTask.id !== task.id);\r\n                setTodoTasks(filtredTodoTasks);\r\n                break;\r\n            case \"in_progress\":\r\n                const filtredProgressTasks = progressTasks.filter((fromTask) => fromTask.id !== task.id);\r\n                setProgressTasks(filtredProgressTasks);\r\n                break;\r\n            case \"done\":\r\n                const filtredDoneTasks = doneTasks.filter((fromTask) => fromTask.id !== task.id);\r\n                setDoneTasks(filtredDoneTasks);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n\r\n            <div className={styles.col}>\r\n                <span>TODO</span>\r\n                <div className={styles.target}\r\n                    onDragOver={(e) => onDragOverHandler(e)}\r\n                    onDrop={(e) => onDropHandler(e, \"todo\")} >\r\n                        <NoteList data={todoTasks} onDrag={onDragStartHandler} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.col}>\r\n                <span>IN PROGRESS</span>\r\n                <div className={styles.target} \r\n                    onDragOver={(e) => onDragOverHandler(e)}\r\n                    onDrop={(e) => onDropHandler(e, \"in_progress\")} >\r\n                        <NoteList data={progressTasks} onDrag={onDragStartHandler} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.col}>\r\n                <span>DONE</span>\r\n                <div className={styles.target}\r\n                    onDragOver={(e) => onDragOverHandler(e)}\r\n                    onDrop={(e) => onDropHandler(e, \"done\")}>\r\n                        <NoteList data={doneTasks} onDrag={onDragStartHandler} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import React, { useState, useEffect } from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { ITask } from '../../interfaces/interfaces';\r\nimport { RootState } from '../../store';\r\nimport Board from '../../components/Board/Board';\r\nimport \"./styles.css\";\r\n\r\nconst Listpage: React.FC = () => {\r\n    const tasksList = useSelector((state: RootState) => state.tasks.tasks);\r\n    const [tasks, setTasks] = useState<ITask[]>([]);\r\n    const [taskLength, setTaskLength] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if(tasksList.length !== taskLength) {\r\n            setTaskLength(tasksList.length);\r\n            setTasks(tasksList);\r\n        }\r\n    },[tasksList, taskLength]);\r\n\r\n    \r\n    return (\r\n        <Board list={tasks} />\r\n    )\r\n}\r\n\r\nexport default Listpage;","import React,{ useState } from 'react';\r\nimport {TodoFormProps} from '../../interfaces/interfaces';\r\nimport styles from './Form.module.css';\r\n\r\ninterface IProps extends TodoFormProps {\r\n    theme: string\r\n}\r\n\r\nconst Form: React.FC<IProps> = (props) => {\r\n    const [input, setInput] = useState<string>('');\r\n    const [txtArea, setTxtArea] = useState<string>('');\r\n\r\n    \r\n    const handleSubmit =(event: React.FormEvent)=> {\r\n        event.preventDefault();\r\n        if(input === '' || txtArea === '') return;\r\n        const formObj = {\r\n            id: Date.now(),\r\n            title: input,\r\n            desc: txtArea,\r\n            status: \"todo\"\r\n        }\r\n        props.onAddTask(formObj);\r\n        clearTextFields();\r\n    }\r\n\r\n    const clearTextFields = () => {\r\n        setInput('');\r\n        setTxtArea('');\r\n    }\r\n\r\n    const styleTheme = (props.theme === 'bright') ? \"\" : styles.dark;\r\n\r\n    return (\r\n       <form onSubmit={handleSubmit} className={`${styleTheme}`}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"title\" className={styles.title}>Create Task</label>\r\n                <input onChange={(e)=>setInput(e.target.value)} value={input}  type=\"text\" style={{width: \"15rem\"}} name=\"title\" placeholder=\"title\" id=\"title...\" />\r\n                <textarea onChange={(e)=>setTxtArea(e.target.value)} value={txtArea} style={{width: \"15rem\", height: \"15rem\"}} name=\"body\" placeholder=\"Enter something...\"></textarea>\r\n                <button type=\"submit\" className=\"btn-success\">Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport Form from '../Form/Form'\r\nimport {useDispatch} from 'react-redux';\r\nimport {addTask} from '../../store/TaskSlice';\r\nimport {ITask} from '../../interfaces/interfaces';\r\nimport {useStorage} from '../../hooks/useStorage';\r\nimport {useSelector} from 'react-redux';\r\nimport { RootState } from '../../store';\r\n\r\nconst Main: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {save} = useStorage();\r\n\r\n    const themeStyle = useSelector((state: RootState) => state.theme.theme);\r\n\r\n    const addNewtask = (task: ITask) => {\r\n        save(task);\r\n        dispatch(addTask(task))\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 center\">\r\n                    <Form onAddTask={addNewtask} theme={themeStyle} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./styles.css\";\r\n\r\nconst NoMatch:React.FC = () => <h1 className=\"no_notes\">PAGE NOT FOUND ERROR 404!!!</h1>\r\n\r\nexport default NoMatch;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ListPage from './components/Pages/ListPage';\r\nimport MainPage from './components/Pages/MainPage';\r\nimport NoMatch from './components/Pages/NoMatch';\r\n\r\nconst RouterApp: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={MainPage} />\r\n            <Route path={`${process.env.PUBLIC_URL}/list`} component={ListPage} />\r\n            <Route path=\"*\" component={NoMatch} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default RouterApp;","import React, {useEffect} from 'react';\r\nimport Header from '../Header/Header';\r\nimport RouterApp from '../../routerApp';\r\nimport {useStorage} from '../../hooks/useStorage';\r\nimport {useDispatch} from 'react-redux';\r\nimport {addStoredTasks} from '../../store/TaskSlice';\r\nimport { RootState } from '../../store';\r\nimport {useSelector} from 'react-redux';\r\nimport styles from './App.module.css';\r\n\r\nconst App: React.FC = () => {\r\n  const themeStyle = useSelector((state: RootState) => state.theme.theme);\r\n  const { getAll } = useStorage();\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  useEffect(() => {\r\n    const storedTasks = getAll();\r\n    dispatch(addStoredTasks(storedTasks));\r\n  },[]);\r\n\r\n  const styleTheme = (themeStyle === 'bright') ? \"\" : styles.dark;\r\n\r\n  return (\r\n    <div className={`${styleTheme} ${styles.wrapper}`}>\r\n      <Header />\r\n      <RouterApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport taskSliceReducer from './TaskSlice'\r\nimport themeSliceReducer from './ThemeSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      tasks: taskSliceReducer,\r\n      theme: themeSliceReducer\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import { createStore, applyMiddleware } from 'redux';\r\n// import thunk from 'redux-thunk';\r\n// import rootReducer from './reducers/index';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './components/App/App';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {store} from './store';\r\n// const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router basename=\"/\">\r\n            <App />\r\n        </Router>\r\n    </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}