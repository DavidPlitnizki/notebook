{"version":3,"sources":["components/Badge/Badge.tsx","components/Header/Header.tsx","components/Form/Form.tsx","constants/types.ts","hooks/useStorage.tsx","components/Pages/MainPage.tsx","actions/actions.ts","components/App/App.tsx","components/Note/Note.tsx","components/Pages/ListPage.tsx","routerApp.tsx","serviceWorker.ts","reducers/TaskReducer.ts","reducers/index.ts","index.tsx"],"names":["Badge","count","type","className","Header","tasksList","useSelector","state","tasksState","tasks","href","id","name","htmlFor","length","to","Form","props","useState","input","setInput","txtArea","setTxtArea","clearTextFields","onSubmit","event","preventDefault","formObj","Date","now","title","desc","onAddTask","onChange","e","target","value","style","width","placeholder","height","ADD_TASK","DELETE_TASK","useStorage","save","task","newTasks","res","localStorage","getItem","result","JSON","parse","push","setItem","stringify","removeTask","filter","item","get","getAll","parsedRes","Main","dispatch","useDispatch","payload","App","MainPage","Note","deleteNote","onClick","Listpage","setTasks","useEffect","storedTasks","map","key","RouterApp","exact","path","component","ListPage","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a99b29d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Badge.css';\r\n\r\n\r\nconst Badge: React.FC<{count: number, type: string}> = ({count, type}) => {\r\n    return (\r\n    <div className={`container_badge ${type}`}>\r\n        <span>{count}</span>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Badge;","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Badge from '../Badge/Badge';\r\n\r\ninterface ITasksState  {\r\n    tasksState: any;\r\n}\r\n\r\nconst Header: React.FC = () => {\r\n    const tasksList = useSelector((state: ITasksState) => state.tasksState.tasks);\r\n\r\n    return(\r\n        <nav className=\"border split-nav\">\r\n            <div className=\"nav-brand\">\r\n                <h3><a href=\"/\">NOTEBOOK</a></h3>\r\n            </div>\r\n            <div className=\"collapsible\">\r\n            <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible1\" />\r\n                <button>\r\n                    <label htmlFor=\"collapsible1\">\r\n                        <div className=\"bar1\"></div>\r\n                        <div className=\"bar2\"></div>\r\n                        <div className=\"bar3\"></div>\r\n                    </label>\r\n                </button>\r\n                {tasksList.length > 0 && <Badge type=\"menu\" count={tasksList.length} />}\r\n                <div className=\"collapsible-body\">\r\n                    <ul className=\"inline\">\r\n                        <li><Link to=\"/\">Main</Link></li>\r\n                        <li><Link to=\"/list\">All</Link></li>\r\n                    </ul>\r\n                    {tasksList.length > 0 && <Badge type=\"link\" count={tasksList.length} />}\r\n                </div>\r\n            </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React,{ useState } from 'react';\r\nimport {TodoFormProps} from '../../interfaces/interfaces';\r\n\r\nconst Form: React.FC<TodoFormProps> = (props) => {\r\n    const [input, setInput] = useState<string>('');\r\n    const [txtArea, setTxtArea] = useState<string>('');\r\n\r\n    \r\n    const handleSubmit =(event: React.FormEvent)=> {\r\n        event.preventDefault();\r\n        if(input === '' || txtArea === '') return;\r\n        const formObj = {\r\n            id: Date.now(),\r\n            title: input,\r\n            desc: txtArea\r\n        }\r\n        props.onAddTask(formObj);\r\n        clearTextFields();\r\n    }\r\n\r\n    const clearTextFields = () => {\r\n        setInput('');\r\n        setTxtArea('');\r\n    }\r\n\r\n    return (\r\n       <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Input</label>\r\n                <input onChange={(e)=>setInput(e.target.value)} value={input}  type=\"text\" style={{width: \"15rem\"}} name=\"title\" placeholder=\"title\" id=\"title...\" />\r\n                <textarea onChange={(e)=>setTxtArea(e.target.value)} value={txtArea} style={{width: \"15rem\", height: \"15rem\"}} name=\"body\" placeholder=\"Enter something...\"></textarea>\r\n                <button type=\"submit\" className=\"btn-success\">Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import {ITask} from '../interfaces/interfaces';\r\n\r\nexport const ADD_TASK = \"ADD_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\n\r\ninterface addTaskAction {\r\n    type: typeof ADD_TASK\r\n    payload: ITask\r\n}\r\n\r\ninterface deleteTaskAction {\r\n    type: typeof DELETE_TASK\r\n    payload: number\r\n}\r\n\r\nexport type TaskActionTypes = addTaskAction | deleteTaskAction;","import {ITask} from '../interfaces/interfaces';\r\n\r\nconst storageName = \"NOTES\";\r\n\r\nexport const useStorage = () => {\r\n    const save = (task: ITask) => {\r\n       let newTasks: ITask[] = [];\r\n       const res = localStorage.getItem(storageName);\r\n       if(res) {\r\n        const result = JSON.parse(res);\r\n        newTasks = [...result]\r\n       }\r\n       newTasks.push(task);\r\n       localStorage.setItem(storageName, JSON.stringify(newTasks));\r\n    }\r\n\r\n    const removeTask = (id: number) => {\r\n        let newTasks: ITask[] = [];\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            const result = JSON.parse(res);\r\n            newTasks = result.filter((item: ITask) => item.id !== id);\r\n        }\r\n\r\n        localStorage.setItem(storageName, JSON.stringify(newTasks))\r\n    }\r\n\r\n    const removeAll = () => {}\r\n\r\n    const get = () => {}\r\n\r\n    const getAll = (): ITask[] => {\r\n        let parsedRes: ITask[] = [];\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            parsedRes = JSON.parse(res);\r\n        }\r\n\r\n        return parsedRes;\r\n    }\r\n\r\n    const check = () => {}\r\n\r\n    return {save, removeTask, get, getAll};\r\n}\r\n\r\n","import React from 'react';\r\nimport Form from '../Form/Form'\r\nimport {useDispatch} from 'react-redux';\r\nimport {addTask} from '../../actions/actions'\r\nimport {ITask} from '../../interfaces/interfaces';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\ninterface ITasksState  {\r\n    tasksState: any;\r\n}\r\n\r\nconst Main: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {save} = useStorage();\r\n\r\n    const addNewtask = (task: ITask) => {\r\n        save(task);\r\n        dispatch(addTask(task))\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 center\">\r\n                    <Form onAddTask={addNewtask} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import {ADD_TASK, DELETE_TASK, TaskActionTypes} from '../constants/types';\r\nimport {ITask} from '../interfaces/interfaces';\r\n\r\nexport function addTask(newTask: ITask): TaskActionTypes {    \r\n    return {\r\n        type: ADD_TASK,\r\n        payload: newTask\r\n    }\r\n}\r\n\r\nexport function deleteTask(task: any): TaskActionTypes {\r\n    return {\r\n        type: DELETE_TASK,\r\n        payload: task\r\n    }\r\n}","import React from 'react';\nimport MainPage from '../Pages/MainPage';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport {ITask} from '../../interfaces/interfaces';\r\nimport {useDispatch} from 'react-redux';\r\nimport {deleteTask} from '../../actions/actions';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\n\r\n\r\nconst Note: React.FC<ITask> = ({id, title, desc}) => {\r\n    const dispatch = useDispatch();\r\n    const {removeTask} = useStorage();\r\n\r\n    const deleteNote = (id: number) => {\r\n        removeTask(id);\r\n        dispatch(deleteTask(id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"card child-shadows-hover\" style={{width: \"15rem\"}}>\r\n            <div className=\"card-body\">\r\n    <h4 className=\"card-title\">{title}</h4>\r\n                <hr />\r\n    <p className=\"card-text\">{desc}</p>\r\n                <div className=\"btn_wrapper\">\r\n                    <button className=\"btn-danger\" onClick={()=>deleteNote(id)} >Delete Note</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Note;","import React, { useState, useEffect } from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Note from '../Note/Note';\r\nimport { ITask } from '../../interfaces/interfaces';\r\nimport {useStorage} from '../../hooks/useStorage';\r\nimport \"./styles.css\";\r\n\r\ninterface ITasksState  {\r\n    tasksState: any;\r\n}\r\n\r\nconst Listpage = () => {\r\n    const tasksList = useSelector((state: ITasksState) => state.tasksState.tasks);\r\n    const [tasks, setTasks] = useState(tasksList);\r\n    const { getAll } = useStorage();\r\n\r\n    useEffect(() => {\r\n        const storedTasks = getAll();\r\n        setTasks(storedTasks);\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        setTasks(tasksList);\r\n    },[tasksList])\r\n\r\n    \r\n    return (\r\n        <div>\r\n            {(tasks.length > 0) ? tasks.map((task: ITask)=>{\r\n                return(\r\n                    <Note key={task.id} id={task.id} title={task.title} desc={task.desc} />\r\n                )\r\n            }) : <h1 className=\"no_notes\">NO NOTES</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Listpage;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport App from './components/App/App';\r\nimport ListPage from './components/Pages/ListPage';\r\n\r\nconst RouterApp: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/list\" component={ListPage} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default RouterApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_TASK, DELETE_TASK, TaskActionTypes} from '../constants/types';\r\nimport {ITaskState} from '../interfaces/interfaces';\r\n\r\nconst initialState: ITaskState = {\r\n    tasks: []\r\n}\r\n\r\nexport function taskReducer(\r\n    state = initialState,\r\n    action: TaskActionTypes\r\n): ITaskState {\r\n    switch(action.type) {\r\n        case ADD_TASK: \r\n            return {\r\n                tasks: [...state.tasks, action.payload]\r\n            }\r\n        case DELETE_TASK:\r\n            const newTask = state.tasks.filter(\r\n                    task => task.id !== action.payload\r\n                )\r\n\r\n            return {\r\n                tasks: newTask\r\n            }\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","import { taskReducer } from './TaskReducer'\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  tasksState: taskReducer\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Header from './components/Header/Header';\nimport RouterApp from './routerApp';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst store = createStore(rootReducer, (applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Header />\n            <RouterApp />\n        </Router>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}