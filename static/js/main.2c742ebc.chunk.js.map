{"version":3,"sources":["components/Note/Note.module.css","serviceWorker.ts","components/Badge/Badge.tsx","components/Header/Header.tsx","store/TaskSlice.ts","hooks/useStorage.tsx","components/Note/Note.tsx","components/List/NoteList.tsx","components/Board/Board.tsx","components/Pages/ListPage.tsx","components/Form/Form.tsx","components/Pages/MainPage.tsx","components/Pages/NoMatch.tsx","routerApp.tsx","components/App/App.tsx","store/index.ts","index.tsx","components/Board/Board.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Badge","count","type","className","Header","tasksList","useSelector","state","tasks","to","process","id","name","htmlFor","length","taskSlice","createSlice","initialState","reducers","addTask","action","newState","payload","deleteTask","filtredTasks","filter","task","addStoredTasks","updateStatusTask","push","actions","useStorage","getAll","parsedRes","res","localStorage","getItem","JSON","parse","save","newTasks","result","setItem","stringify","removeTask","item","getTask","updateTask","Note","data","dragStart","dispatch","useDispatch","draggable","onDragStart","title","status","styles","pre_init","desc","onClick","NoteList","onDrag","map","key","e","Board","props","useState","todoTasks","setTodoTasks","progressTasks","setProgressTasks","doneTasks","setDoneTasks","dragItem","useRef","useEffect","list","onDragOverHandler","preventDefault","onDragStartHandler","current","onDropHandler","dropTarget","filtredDataByTask","newTask","filtredTodoTasks","fromTask","filtredProgressTasks","filtredDoneTasks","wrapper","col","target","onDragOver","onDrop","Listpage","setTasks","taskLength","setTaskLength","Form","input","setInput","txtArea","setTxtArea","clearTextFields","onSubmit","event","formObj","Date","now","onAddTask","onChange","value","style","width","placeholder","height","Main","NoMatch","RouterApp","exact","path","component","MainPage","ListPage","App","storedTasks","store","configureStore","reducer","taskSliceReducer","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c742ebc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pre_init\":\"Note_pre_init__3QGHa\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Badge.css';\r\n\r\n\r\nconst Badge: React.FC<{count: number, type: string}> = ({count, type}) => {\r\n    return (\r\n    <div className={`container_badge ${type}`}>\r\n        <span>{count}</span>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Badge;","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Badge from '../Badge/Badge';\r\nimport { RootState } from '../../store';\r\n\r\nconst Header: React.FC = () => {\r\n    const tasksList = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n    return(\r\n        <nav className=\"border split-nav\">\r\n            <div className=\"nav-brand\">\r\n                <h3><Link to={`${process.env.PUBLIC_URL}/`}>NOTEBOOK</Link></h3>\r\n            </div>\r\n            <div className=\"collapsible\">\r\n            <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible1\" />\r\n                <button>\r\n                    <label htmlFor=\"collapsible1\">\r\n                        <div className=\"bar1\"></div>\r\n                        <div className=\"bar2\"></div>\r\n                        <div className=\"bar3\"></div>\r\n                    </label>\r\n                </button>\r\n                {tasksList.length > 0 && <Badge type=\"menu\" count={tasksList.length} />}\r\n                <div className=\"collapsible-body\">\r\n                    <ul className=\"inline\">\r\n                        <li><Link to={`${process.env.PUBLIC_URL}/`}>Main</Link></li>\r\n                        <li><Link to={`${process.env.PUBLIC_URL}/list`}>All</Link></li>\r\n                    </ul>\r\n                    {tasksList.length > 0 && <Badge type=\"link\" count={tasksList.length} />}\r\n                </div>\r\n            </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import {ITask, ITaskState} from '../interfaces/interfaces';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\n\r\nconst initialState: ITaskState = {\r\n    tasks: []\r\n}\r\n\r\nexport const taskSlice = createSlice({\r\n  name: 'task',\r\n  initialState,\r\n  reducers: {\r\n       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n    addTask: (state, action: PayloadAction<ITask>) => {\r\n        const newState = [...state.tasks, action.payload];\r\n        state.tasks = newState;\r\n    },\r\n    deleteTask: (state, action: PayloadAction<number>) => {\r\n        const filtredTasks = state.tasks.filter((task) => task.id !== action.payload);\r\n        state.tasks = filtredTasks;\r\n    },\r\n    addStoredTasks: (state, action: PayloadAction<ITask[]>) => {\r\n        const newState = [...state.tasks, ...action.payload];\r\n        state.tasks = newState;\r\n    },\r\n    updateStatusTask: (state, action: PayloadAction<ITask>) => {\r\n      const newState = state.tasks.filter((task) => task.id !== action.payload.id);\r\n      newState.push(action.payload);\r\n      state.tasks = newState;\r\n    }\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { addTask, deleteTask, addStoredTasks, updateStatusTask } = taskSlice.actions\r\n\r\nexport default taskSlice.reducer","import {ITask} from '../interfaces/interfaces';\r\n\r\nconst storageName = \"NOTES\";\r\n\r\nexport const useStorage = () => {\r\n    const save = (task: ITask) => {\r\n       let newTasks: ITask[] = [];\r\n       const res = localStorage.getItem(storageName);\r\n       if(res) {\r\n        const result = JSON.parse(res);\r\n        newTasks = [...result]\r\n       }\r\n       newTasks.push(task);\r\n       localStorage.setItem(storageName, JSON.stringify(newTasks));\r\n    }\r\n\r\n    const removeTask = (id: number) => {\r\n        let newTasks: ITask[] = [];\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            const result = JSON.parse(res);\r\n            newTasks = result.filter((item: ITask) => item.id !== id);\r\n        }\r\n\r\n        localStorage.setItem(storageName, JSON.stringify(newTasks))\r\n    }\r\n\r\n    const updateTask = (task: ITask) =>{\r\n        const res = getAll();\r\n        if(res) {\r\n            const result = res.filter((item) => item.id !== task.id);\r\n            result.push(task);\r\n            localStorage.setItem(storageName, JSON.stringify(result));\r\n        }\r\n    }\r\n\r\n    const getTask = (task: ITask) => {\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            const result = JSON.parse(res);\r\n            return result.filter((item: ITask) => item.id === task.id);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const getAll = (): ITask[] => {\r\n        let parsedRes: ITask[] = [];\r\n        const res = localStorage.getItem(storageName);\r\n        if(res) {\r\n            parsedRes = JSON.parse(res);\r\n        }\r\n\r\n        return parsedRes;\r\n    }\r\n\r\n    return {save, removeTask, getTask, getAll, updateTask};\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from './Note.module.css';\r\n\r\nimport {ITask} from '../../interfaces/interfaces';\r\nimport {useDispatch} from 'react-redux';\r\nimport {deleteTask} from '../../store/TaskSlice';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\ninterface IProps {\r\n   data: ITask,\r\n   dragStart:(e: any) => void\r\n}\r\n\r\n\r\n\r\nconst Note: React.FC<IProps> = ({data, dragStart}) => {\r\n    const dispatch = useDispatch();\r\n    const {removeTask} = useStorage();\r\n\r\n    const deleteNote = (id: number) => {\r\n        removeTask(id);\r\n        dispatch(deleteTask(id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"card child-shadows-hover\" draggable onDragStart={dragStart}>\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title\">{data.title}</h4>\r\n                <hr />\r\n                <h5 className=\"card-title\">status: {data.status}</h5>\r\n                <hr />\r\n                <pre className={`card-text ${styles.pre_init}`}>{data.desc}</pre>\r\n                <div className=\"btn_wrapper\">\r\n                    <button className=\"btn-danger\" onClick={()=>deleteNote(data.id)} >Delete Note</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\nimport { ITask } from '../../interfaces/interfaces';\r\n\r\nimport Note from '../Note/Note';\r\n\r\ninterface IProps {\r\n    data: ITask[],\r\n    onDrag:(e: any, task: ITask) => void\r\n}\r\n\r\nconst NoteList:React.FC<IProps> = ({data, onDrag}) => {\r\n    return (\r\n        <>\r\n         {(data.length > 0) ? data.map((task: ITask)=>{\r\n                    const data = {\r\n                        id: task.id,\r\n                        title: task.title,\r\n                        desc: task.desc,\r\n                        status: task.status\r\n                    }\r\n                    return(\r\n                        <Note key={task.id}\r\n                                data={data}\r\n                                dragStart={(e: any) => onDrag(e, task)}\r\n                                 />\r\n                    )\r\n                }) : <h1 className=\"no_notes\">NO NOTES</h1>}\r\n            </>\r\n    )\r\n}\r\n\r\nexport default NoteList;","import React,{useState, useRef, useEffect} from 'react';\r\nimport { ITask } from '../../interfaces/interfaces';\r\nimport styles from './Board.module.css';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport { updateStatusTask } from '../../store/TaskSlice';\r\nimport NoteList from '../List/NoteList';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\ninterface IProps {\r\n    list: ITask[]\r\n}\r\n\r\nconst Board: React.FC<IProps> = (props: IProps) => {\r\n    \r\n    const [todoTasks, setTodoTasks] = useState<ITask[]>([]);\r\n    const [progressTasks, setProgressTasks] = useState<ITask[]>([]);\r\n    const [doneTasks, setDoneTasks] = useState<ITask[]>([]);\r\n\r\n    const dragItem = useRef() as React.MutableRefObject<ITask>;\r\n    \r\n    const dispatch = useDispatch();\r\n    const { updateTask } = useStorage();\r\n\r\n    useEffect(() => {\r\n        setTodoTasks(props.list.filter((task) => task.status === \"todo\"));\r\n        setProgressTasks(props.list.filter((task) => task.status === \"in_progress\"));\r\n        setDoneTasks(props.list.filter((task) => task.status === \"done\"));\r\n    },[props.list])\r\n\r\n\r\n\r\n    const onDragOverHandler= (e: any) => { e.preventDefault();}\r\n\r\n    const onDragStartHandler = (e: any, task: ITask) => {\r\n        dragItem.current = task;\r\n    }\r\n\r\n    const onDropHandler = (e: any, dropTarget: string) => {    \r\n\r\n        if(dropTarget === dragItem.current.status) return;\r\n\r\n         if(dropTarget === \"todo\") {\r\n            const task = dragItem.current;\r\n            filtredDataByTask(task);\r\n            \r\n                const newTask = {\r\n                    id: task.id,\r\n                    desc: task.desc,\r\n                    title: task.title,\r\n                    status: dropTarget\r\n                }\r\n            setTodoTasks([...todoTasks, newTask]);\r\n            dispatch(updateStatusTask(newTask));\r\n            updateTask(newTask);\r\n         }else if(dropTarget === \"in_progress\") {\r\n             const task = dragItem.current;\r\n                filtredDataByTask(task);\r\n              \r\n                const newTask = {\r\n                    id: task.id,\r\n                    desc: task.desc,\r\n                    title: task.title,\r\n                    status: dropTarget\r\n                }\r\n                setProgressTasks([...progressTasks, newTask]);\r\n                dispatch(updateStatusTask(newTask));\r\n                updateTask(newTask);\r\n         }else if(dropTarget === \"done\") {\r\n            const task = dragItem.current;\r\n            filtredDataByTask(task);\r\n\r\n            const newTask = {\r\n                id: task.id,\r\n                desc: task.desc,\r\n                title: task.title,\r\n                status: dropTarget\r\n            }\r\n            setDoneTasks([...doneTasks, newTask]);\r\n            dispatch(updateStatusTask(newTask));\r\n            updateTask(newTask);\r\n        }\r\n    }\r\n\r\n    const filtredDataByTask = (task: ITask) => {\r\n        switch(task.status) {\r\n            case \"todo\":\r\n                const filtredTodoTasks = todoTasks.filter((fromTask) => fromTask.id !== task.id);\r\n                setTodoTasks(filtredTodoTasks);\r\n                break;\r\n            case \"in_progress\":\r\n                const filtredProgressTasks = progressTasks.filter((fromTask) => fromTask.id !== task.id);\r\n                setProgressTasks(filtredProgressTasks);\r\n                break;\r\n            case \"done\":\r\n                const filtredDoneTasks = doneTasks.filter((fromTask) => fromTask.id !== task.id);\r\n                setDoneTasks(filtredDoneTasks);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n\r\n            <div className={styles.col}>\r\n                <span>TODO</span>\r\n                <div className={styles.target}\r\n                    onDragOver={(e) => onDragOverHandler(e)}\r\n                    onDrop={(e) => onDropHandler(e, \"todo\")} >\r\n                        <NoteList data={todoTasks} onDrag={onDragStartHandler} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.col}>\r\n                <span>IN PROGRESS</span>\r\n                <div className={styles.target} \r\n                    onDragOver={(e) => onDragOverHandler(e)}\r\n                    onDrop={(e) => onDropHandler(e, \"in_progress\")} >\r\n                        <NoteList data={progressTasks} onDrag={onDragStartHandler} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.col}>\r\n                <span>DONE</span>\r\n                <div className={styles.target}\r\n                    onDragOver={(e) => onDragOverHandler(e)}\r\n                    onDrop={(e) => onDropHandler(e, \"done\")}>\r\n                        <NoteList data={doneTasks} onDrag={onDragStartHandler} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import React, { useState, useEffect } from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { ITask } from '../../interfaces/interfaces';\r\nimport { RootState } from '../../store';\r\nimport Board from '../../components/Board/Board';\r\nimport \"./styles.css\";\r\n\r\nconst Listpage: React.FC = () => {\r\n    const tasksList = useSelector((state: RootState) => state.tasks.tasks);\r\n    const [tasks, setTasks] = useState<ITask[]>([]);\r\n    const [taskLength, setTaskLength] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if(tasksList.length !== taskLength) {\r\n            setTaskLength(tasksList.length);\r\n            setTasks(tasksList);\r\n        }\r\n    },[tasksList, taskLength]);\r\n\r\n    \r\n    return (\r\n        <Board list={tasks} />\r\n    )\r\n}\r\n\r\nexport default Listpage;","import React,{ useState } from 'react';\r\nimport {TodoFormProps} from '../../interfaces/interfaces';\r\n\r\nconst Form: React.FC<TodoFormProps> = (props) => {\r\n    const [input, setInput] = useState<string>('');\r\n    const [txtArea, setTxtArea] = useState<string>('');\r\n\r\n    \r\n    const handleSubmit =(event: React.FormEvent)=> {\r\n        event.preventDefault();\r\n        if(input === '' || txtArea === '') return;\r\n        const formObj = {\r\n            id: Date.now(),\r\n            title: input,\r\n            desc: txtArea,\r\n            status: \"todo\"\r\n        }\r\n        props.onAddTask(formObj);\r\n        clearTextFields();\r\n    }\r\n\r\n    const clearTextFields = () => {\r\n        setInput('');\r\n        setTxtArea('');\r\n    }\r\n\r\n    return (\r\n       <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Input</label>\r\n                <input onChange={(e)=>setInput(e.target.value)} value={input}  type=\"text\" style={{width: \"15rem\"}} name=\"title\" placeholder=\"title\" id=\"title...\" />\r\n                <textarea onChange={(e)=>setTxtArea(e.target.value)} value={txtArea} style={{width: \"15rem\", height: \"15rem\"}} name=\"body\" placeholder=\"Enter something...\"></textarea>\r\n                <button type=\"submit\" className=\"btn-success\">Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport Form from '../Form/Form'\r\nimport {useDispatch} from 'react-redux';\r\nimport {addTask} from '../../store/TaskSlice';\r\nimport {ITask} from '../../interfaces/interfaces';\r\nimport {useStorage} from '../../hooks/useStorage';\r\n\r\nconst Main: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {save} = useStorage();\r\n\r\n    const addNewtask = (task: ITask) => {\r\n        save(task);\r\n        dispatch(addTask(task))\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 center\">\r\n                    <Form onAddTask={addNewtask} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./styles.css\";\r\n\r\nconst NoMatch:React.FC = () => <h1 className=\"no_notes\">PAGE NOT FOUND ERROR 404!!!</h1>\r\n\r\nexport default NoMatch;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ListPage from './components/Pages/ListPage';\r\nimport MainPage from './components/Pages/MainPage';\r\nimport NoMatch from './components/Pages/NoMatch';\r\n\r\nconst RouterApp: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={MainPage} />\r\n            <Route path={`${process.env.PUBLIC_URL}/list`} component={ListPage} />\r\n            <Route path=\"*\" component={NoMatch} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default RouterApp;","import React, {useEffect} from 'react';\r\nimport Header from '../Header/Header';\r\nimport RouterApp from '../../routerApp';\r\nimport {useStorage} from '../../hooks/useStorage';\r\nimport {useDispatch} from 'react-redux';\r\nimport {addStoredTasks} from '../../store/TaskSlice';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const { getAll } = useStorage();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const storedTasks = getAll();\r\n    dispatch(addStoredTasks(storedTasks));\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <RouterApp />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport taskSliceReducer from './TaskSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      tasks: taskSliceReducer\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import { createStore, applyMiddleware } from 'redux';\r\n// import thunk from 'redux-thunk';\r\n// import rootReducer from './reducers/index';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './components/App/App';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {store} from './store';\r\n// const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router basename=\"/notebook\">\r\n            <App />\r\n        </Router>\r\n    </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Board_wrapper__27StD\",\"col\":\"Board_col__31reL\",\"target\":\"Board_target__33EIV\"};"],"sourceRoot":""}